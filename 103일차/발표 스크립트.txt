안녕하세요 오늘 8팀의 발표를 맡은 팀장 김태호입니다. 
저희는 '메타버스 자율주행 프로젝트'를 진행해보았습니다.
네 ㅋㅋㅋ 제목을 이렇게 달아놓으니까 되게 거창해보이네요 ㅋㅋㅋ
커뮤니티에 있는 저희 계획서 보신 분들이라면 아마 보셨을텐데요.
GTA5라는 게임을 이용해서 프로젝트를 진행했습니다.
아마 제목을 우리말로 좀 의역하면 위대한 차도둑 다섯번째 시리즈 정도 될 것 같네요.
아무튼 이 GTA라는 게임이 실제 미국 도시의 모습을 굉장히 잘 구현해둔 것으로도 꽤
유명한데요, 그곳에서 차량을 운전하는 AI 모델을 만들어보는 프로젝트였습니다.

잠여 인원은 다음과 같습니다.
김태호, 안동하, 허정승, 배성환, 최호민 이렇게 8팀 5명과 함께 저희의 코드 수정에 도움을 준
ChatGPT도 빼놓을 수 없어서 작게 이름 기재해두었습니다. ㅋㅋㅋ

자 그럼 먼저 목차부터 보시죠
발표 순서는 다음과 같습니다. 앞서 다른 팀 분들도 비슷한 순서로 발표하셨기에, 목차 설명은
생략하고 넘어가도록 하겠습니다.

프로젝트 목표를 말씀드리기 앞서 저희가 아이디어 회의에서 이 주제를 선정하게 된 계기는 우측의
sentdex라는 사람인데요. 알렉스넷을 이용해서 만든 모델로 몇 년 전에 인터넷 방송도 했었더라구요.
게다가 이게 마침 파이썬으로 했던 거라서 저희가 진행하는데 있어서 좀 도움을 받을 수 있겠다는
생각이 좀 들었습니다. 그래서 정말 저희가 시도해볼만한 내용인지 찾아보던 와중에, 좌측에 있는
신문 기사를 추가로 발견했습니다. 지금 좀 작아서 잘 안보이실 것 같은데, 일부 기업들에서 자율주행 AI를
훈련시킬 때 GTA와 같은 게임 환경을 활용해보려는 시도를 해보고 있다는 내용입니다.
이런 내용들을 계속 보다보니까, 좋은 결과가 나올지는 잘 모르겠는데 너무 재미있어 보이더라구요.
그래서 최근 모델을 적용해서 하면 저 영상에 나오는 것 보다는 잘 운전하게 할 수 있지 않을까
하는 근거없는 자신감이 막 생겨서, 우리가 그동안 배운 내용으로 어디까지 구현할 수 있을지
한번 시도를 해보기로 했습니다.
아 참고로 저 영상이 트위치에서 방송했던 영상이어서 다시보기로 봐야하는데 현재 한국에서는
트위치 다시보기 기능이 지원되지 않아서 저 영상이 보고 싶으시다면 vpn 등을 이용하여 잠시
사이버 외국인이 되어서 보셔야합니다. 그리고 이따 보여드릴건데 저희가 만든게 아주 쪼끔 더 잘
움직입니다 ㅋㅋㅋ

다음으로 진행 과정입니다. 데이터는 저희가 직접 게임 내에서 차량을 운전하면서 생성했고, 주행하는 동안
순간 순간의 게임 화면을 PIL ImageGrab을 이용해서 캡처했습니다. 그리고 그 순간의 키 입력값을
라벨로 해서 데이터셋을 구축하고 다양한 모델들에 학습시켰습니다. 그런 다음 실시간으로 게임 화면을
캡처하여 훈련한 모델에 넣었을때 나온 예측값을 기준으로 키 입력을 발생시켜서 게임 내에서 차량을
조작하도록 구현했습니다.

데이터 수집 과정에서 직접 데이터를 생성해야하는데, 전원이 게임을 가지고 있지 않아서,
비슷하게 적용할 수 있을 것으로 보이는 로블록스를 추가적으로 선택하여 같은 방식으로 데이터를
수집해서 진행해보았습니다.
최초에는 전진, 후진, 좌회전, 우회전, 중립으로 5개 클래스를 적용하려고 시도해보았는데요, 뒤에서도
다시 언급하겠지만, 전진/후진과 중립을 모델이 제대로 구분하지 못하는 문제가 있어서 해당 라벨들을
제거하고 3개 클래스로 변경해서 진행했고,(페이지 넘김)
이렇게 데이터가 수집되었습니다. 전체 수집 데이터에 대해서 train/valid/test를 8:1:1로 나누었습니다.
보시면 맵 자체가 지형이 일정하지 않아서 데이터량이 균등하지 않다는 점이 조금 눈에 띄눈 부분입니다.
이게 가장 좋은 결과를 얻은 모델의 학습 데이터구요. 데이터량을 비슷하게 맞춰서 학습한 모델도
적용해봤는데, 이정도 차이로는 자율주행에 티끌만한 차이도 줄 수 없다는 것을 알게되었습니다.

다음으로 모델의 하이퍼 파라미터들에 대한 내용입니다. 수치상으로 가장 좋은 결과를 보인 모델들은
다음과 같은 방식으로 학습했습니다. 다만 수치상 Acc가 높은 모델이 실제로 운전도 잘 한다는 결과로
연결되지는 않았다는 점 먼저 말씀드리겠습니다 ㅋㅋㅋ

이어서 게임 내 구현과정입니다. 앞서 간단히 말씀드린 내용을 조금 부가 설명하자면
train된 모델의 출력값을 softmax를 이용해서 라벨별 확률로 변경하고
최고 확률인 라벨의 확률값과 라벨을 받아서 확률값이 일정 이상일 경우에 해당 라벨에 맞는
windows 키 입력을 발생시켜서 게임 내 차량을 조작하는 방식입니다.
(페이지 넘기고) 이것을 다섯개 class로 진행했었는데요, 실제 적용해보니 
끝도없이 후진만 계속한다던지, 전진/후진을 무한반복하는 경우도 있었고,
이유 없이 한 자리에서 계속 한 방향으로 회전만하는 등의 문제가 발생했습니다.
그래서 우선 전진과 좌/우회전만 분류하는 3class 분류 방식으로 변경하기로 결정했고, 단순히
classificaton의 결과만으로 판단하는 것이 아니라 추가적으로 방향을 잡아줄 수 있는 방안의
필요성을 느끼게 되었습니다.

그래서 먼저 차선을 검출하여 방향전환을 보정해보기로 했습니다.
canny edge를 적용한 이미지에 gaussian blur를 약하게 적용하여 자잘한 선들을 조금
정리한 다음, 허프 변환을 통해서 차선일 가능성이 가장 높은 선을 검출합니다.
이후 검출한 선의 기울기를 기준으로 모델의 예측값을 보정해주어서 방향전환을 조금 더 정확하게
할 수 있도록 했습니다.

다음으로는 게임이기 때문에 할 수 있는 방식인데요, 미니맵을 이용해서 보정을 해보려고 했습니다.
지금 사진에는 그냥 미니맵만 나왔는데, 게임 내의 지도에서 특정 좌표를 지정하면 해당 위치로 가는
최단거리를 보라색 선으로 표시해줍니다. 미니맵은 좀 작긴하지만 항상 화면에 표시되기 때문에 미니맵에
표시된 보라색 선을 검출해서 차선 검출과 같은 방식으로 모델의 예측값을 보정해서 방향을 어느정도
조정해줄 수 있게 했습니다.
(페이지 넘김)

저희가 시도한 기술적인 부분들은 여기까지구요. 시연 영상을 보여드리겠습니다.
(영상 재생, 첫 영상 음소거 확인)
네.... 결과가 그렇게 아름답지는 않더라구요 ㅋㅋㅋㅋㅋ 당연히 이 영상들이 상당히 괜찮게 운전한
내용이구요. 많은 경우에는 아주 짧은 시간만에 건물이나 벽을 들이받고 헤어나오지 못하더라구요.
솔직히 좀 많이 아쉽습니다.

저희가 이 프로젝트를 진행하면서 있었던 주요 이슈로 꼽은 것은 두가지입니다.
첫 째는 앞서 말씀드린대로 모델이 전/후진과 중립을 전혀 이해하지 못한다는 점인데요.
조금 더 정확히 말한다면 전진과 후진은 백라이트가 켜진다는 차이가
있습니다만 데이터량이 부족해서 그런 내용을 학습하지 못한 것으로 생각되구요. 주행 도중에
속력을 줄이기 위해 잠시 손을 떼거나, 미세 조정을 위해 잠깐씩 손을 떼서 발생하는 중립이 이미지
상으로는 다른 라벨들과 구분이 거의 불가능하다보니 이것을 구분하지 못한 것으로 생각되긴 하는데,
이런것들이 복합적으로 작용하다보니 저희가 해당 내용을 컨트롤하기 어려운 부분이 있어서 과감히
해당 라벨들을 삭제했습니다. 다만 후진의 경우, 다른 라벨들의 확률이 일정 이하로 낮게 나올 경우에는
후진키를 입력하도록해서 판단이 애매할 때는 후진하도록 적용해보았고,
꽤 괜찮은 결과가 나왔습니다.

두 번째 이슈는 판단 딜레이 문제입니다. 이게 조금 설명하기 어려운데요. 예를 들자면,
사람은 직진하다가도 좌회전을 해야하면 적절한 지점에서 좌회전 버튼을 누르지만,
AI 모델은 차량이 이미 회전중이어서 차체가 돌아가 있거나, 바퀴의 방향이 돌아가있는 상태가 아니면
좌회전을 해야한다고 판단하지 못하는 문제가 있었습니다.
이것은 데이터 수집 시에 저희가 임의로 키 입력과 이미지 캡처간에 딜레이를 조금 넣어서
보정했습니다.

마지막으로 이번 프로젝트를 통해 저희가 느낀 한계점과 추후 시도해볼만한 추가 개선 방안입니다.
우선 저희가 시도한 classification을 이용하는 방식은 매우 general하기 때문에 여러가지 경우에
적용해볼 수 있지만, 저희가 얻은 결과처럼 한계가 매우 뚜렷하다는 문제가 있었습니다.
최근의 자율주행 기술이 센서와 객체 탐지를 중심으로 하는 이유에 대해서 다시 한번 확인해볼 수
있었습니다.
다음 한계점은 게임 상이기 때문에 얻을 수 있는 정보에 큰 제한이 있었다는 점 입니다.
최초에 이 주제를 선정 할 때, 게임 상에서 자율주행을 구현해보려고 했던 큰 이유 중 하나는 혹시
모델을 만든다고 하더라도 실제 차량 운행에 적용해보는 것은 어렵지만, 게임 상의 차량은 쉽게
적용해볼 수 있다는 것이었습니다. 하지만 반대로 게임이기 때문에 메모리를 전부 뜯어서 분석해보지
않는 이상은 게임에서 제공되는 화면 상에 나오지 않는 데이터를 얻을 방법이 사실상 없다는 제한이
발생했습니다. 저희가 이런 게임을 전부 뜯어서 분석해볼 수 있을 정도의 지식을 갖추지도 못했고,
만약 그렇게까지 해서 진행한다고 해도 근본적인 classification을 이용한 방식의 한계를 넘어서기에는
상당히 부족할 것이라는 쪽으로 팀원들과 합의하여 이번 프로젝트는 여기에서 마무리하기로
결정했습니다.

추후에 개선을 시도하게 된다면, 우선적으로 분류를 통한 방식이 아니라 객체 탐지나 강화 학습을
통한 방식을 이용하는 것이 훨씬 유리할 것으로 생각되며, 게임 내의 메모리를 분석한다면 조금 더
많은 정보들을 이용해서 주행을 보조할 수 있을 것으로 생각됩니다.

이상으로 저희가 2주간 진행한 프로젝트의 발표를 마치겠습니다. 혹시 질문사항 있으신 분은
지금 질문해주시면 답변드리겠습니다.